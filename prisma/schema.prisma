// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Order         Order[]
    Cart          Cart[]
    Wishlist      Wishlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id              Int               @id @default(autoincrement())
    name            String
    description     String
    price           Int //price in cents 100 cents = $1
    discount        Float //e.g 25% discont applied to the product price
    thumbnail       String
    ProductImages   ProductImages[]
    ProductCategory ProductCategory[]
    OrderItem       OrderItem[]
    CartItem        CartItem[]
    Wishlist        Wishlist[]
}

model ProductImages {
    id         Int     @id @default(autoincrement())
    image      String
    product_id Product @relation(fields: [productId], references: [id])
    productId  Int
}

model Category {
    id              Int               @id @default(autoincrement())
    name            String
    description     String
    image           String
    ProductCategory ProductCategory[]
}

model ProductCategory {
    product    Product  @relation(fields: [productId], references: [id])
    productId  Int
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    @@id([productId, categoryId])
}

model Order {
    id         Int         @id @default(autoincrement())
    status     String
    totalPrice Int
    user       User        @relation(fields: [userId], references: [id])
    userId     String
    OrderItem  OrderItem[]
}

model OrderItem {
    id        Int     @id @default(autoincrement())
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    quantity  Int
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   Int
}

model Cart {
    id       Int        @id @default(autoincrement())
    user     User       @relation(fields: [userId], references: [id])
    userId   String
    CartItem CartItem[]
}

model CartItem {
    id        Int     @id @default(autoincrement())
    quantity  Int
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    cart      Cart    @relation(fields: [cartId], references: [id])
    cartId    Int
}

model Wishlist {
    id        Int     @id @default(autoincrement())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    product   Product @relation(fields: [productId], references: [id])
    productId Int
}
